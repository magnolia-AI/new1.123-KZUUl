
# Workflow Version: 1.1.64
name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  WORKER_NAME: ${{ github.event.repository.name }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build project with OpenNext
        run: |
          # Check if project is configured for OpenNext
          if [ -f "open-next.config.ts" ] || [ -f "open-next.config.js" ]; then
            echo "üì¶ OpenNext configuration found, building with OpenNext..."
            # Install OpenNext if not already installed
            if ! command -v open-next &> /dev/null; then
              echo "Installing OpenNext..."
              bun add -D open-next
            fi
            # Build with OpenNext
            bunx open-next build
          else
            echo "üì¶ Building with standard Next.js build..."
            bun run build
          fi

      - name: Deploy to Cloudflare Workers
        run: |
          # Clean up worker name: lowercase, replace dots/underscores with hyphens, remove special chars
          CLEAN_WORKER_NAME=$(echo "${WORKER_NAME}" | tr '[:upper:]' '[:lower:]' | sed 's/[._]/-/g' | sed 's/[^a-z0-9-]//g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          
          echo "üìù Original worker name: ${WORKER_NAME}"
          echo "üìù Cleaned worker name: ${CLEAN_WORKER_NAME}"
          
          # Determine the correct entry point file for OpenNext v3.x
          ENTRY_POINT=""
          ASSETS_DIR=""
          
          if [ -d ".open-next/server-functions" ]; then
            # OpenNext v3.x structure
            echo "üì¶ Detected OpenNext v3.x output structure"
            
            # Look for the default server function
            if [ -f ".open-next/server-functions/default/index.mjs" ]; then
              ENTRY_POINT=".open-next/server-functions/default/index.mjs"
            elif [ -f ".open-next/server-functions/default/index.js" ]; then
              ENTRY_POINT=".open-next/server-functions/default/index.js"
            else
              echo "‚ùå No suitable server function found in .open-next/server-functions/default/"
              ls -la .open-next/server-functions/default/ || echo "Directory not found"
              exit 1
            fi
            
            # Check for assets
            if [ -d ".open-next/assets" ]; then
              ASSETS_DIR=".open-next/assets"
            fi
            
          elif [ -f ".open-next/worker.js" ]; then
            # OpenNext v2.x structure (legacy)
            echo "üì¶ Detected OpenNext v2.x output structure"
            ENTRY_POINT=".open-next/worker.js"
            ASSETS_DIR=".open-next/assets"
            
          elif [ -f "dist/index.js" ]; then
            # Standard build output
            echo "üì¶ Using standard build output"
            ENTRY_POINT="dist/index.js"
            ASSETS_DIR="dist/assets"
            
          elif [ -f "out/index.js" ]; then
            # Alternative build output
            echo "üì¶ Using alternative build output"
            ENTRY_POINT="out/index.js"
            ASSETS_DIR="out/assets"
            
          else
            echo "‚ùå No suitable entry point found."
            echo "Expected files:"
            echo "  - .open-next/server-functions/default/index.mjs (OpenNext v3.x)"
            echo "  - .open-next/worker.js (OpenNext v2.x)"
            echo "  - dist/index.js (standard build)"
            echo "  - out/index.js (alternative build)"
            echo ""
            echo "Available .open-next structure:"
            ls -la .open-next/ || echo "No .open-next directory found"
            if [ -d ".open-next/server-functions" ]; then
              echo ""
              echo "Server functions:"
              ls -la .open-next/server-functions/
              if [ -d ".open-next/server-functions/default" ]; then
                echo ""
                echo "Default server function:"
                ls -la .open-next/server-functions/default/
              fi
            fi
            exit 1
          fi
          
          echo "üì¶ Using entry point: $ENTRY_POINT"
          echo "üìÅ Using assets directory: $ASSETS_DIR"
          
          # Deploy with the detected entry point
          if [ -d "$ASSETS_DIR" ]; then
            # Deploy with assets
            echo "üöÄ Deploying with assets..."
            bunx wrangler deploy "$ENTRY_POINT" \
              --config /dev/null \
              --name "${CLEAN_WORKER_NAME}" \
              --compatibility-date 2025-03-25 \
              --compatibility-flags "nodejs_compat" \
              --assets "$ASSETS_DIR" \
              --minify
          else
            # Deploy without assets
            echo "üöÄ Deploying without assets..."
            bunx wrangler deploy "$ENTRY_POINT" \
              --config /dev/null \
              --name "${CLEAN_WORKER_NAME}" \
              --compatibility-date 2025-03-25 \
              --compatibility-flags "nodejs_compat" \
              --minify
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Output deployment URL
        run: |
          # Clean up worker name for URL output too (same cleaning logic)
          CLEAN_WORKER_NAME=$(echo "${WORKER_NAME}" | tr '[:upper:]' '[:lower:]' | sed 's/[._]/-/g' | sed 's/[^a-z0-9-]//g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          echo "üöÄ Deployed to: https://${CLEAN_WORKER_NAME}.magnusson27.workers.dev"

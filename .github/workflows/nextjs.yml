
# Workflow Version: 1.1.61
name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  WORKER_NAME: ${{ github.event.repository.name }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build project with OpenNext
        run: |
          # Check if project is configured for OpenNext
          if [ -f "open-next.config.ts" ] || [ -f "open-next.config.js" ]; then
            echo "üì¶ OpenNext configuration found, building with OpenNext..."
            # Install OpenNext if not already installed
            if ! command -v open-next &> /dev/null; then
              echo "Installing OpenNext..."
              bun add -D open-next
            fi
            # Build with OpenNext
            bunx open-next build
          else
            echo "üì¶ Building with standard Next.js build..."
            bun run build
          fi
          
          # Check if OpenNext output exists
          if [ ! -f ".open-next/worker.js" ]; then
            echo "OpenNext worker.js not found. Checking build output..."
            ls -la .open-next/ || echo "No .open-next directory found"
            ls -la dist/ || echo "No dist directory found"
            ls -la out/ || echo "No out directory found"
            echo "Available files in root:"
            ls -la
            exit 1
          fi

      - name: Deploy to Cloudflare Workers
        run: |
          # Clean up worker name by replacing dots with hyphens
          CLEAN_WORKER_NAME=$(echo "${WORKER_NAME}" | sed 's/\./-/g')
          
          # Determine the correct entry point file
          ENTRY_POINT=""
          if [ -f ".open-next/worker.js" ]; then
            ENTRY_POINT=".open-next/worker.js"
            ASSETS_DIR=".open-next/assets"
          elif [ -f "dist/index.js" ]; then
            ENTRY_POINT="dist/index.js"
            ASSETS_DIR="dist/assets"
          elif [ -f "out/index.js" ]; then
            ENTRY_POINT="out/index.js"
            ASSETS_DIR="out/assets"
          else
            echo "‚ùå No suitable entry point found. Please ensure your project builds correctly."
            echo "Expected files: .open-next/worker.js, dist/index.js, or out/index.js"
            exit 1
          fi
          
          echo "üì¶ Using entry point: $ENTRY_POINT"
          echo "üìÅ Using assets directory: $ASSETS_DIR"
          
          # Deploy with the detected entry point
          if [ -d "$ASSETS_DIR" ]; then
            # Deploy with assets
            bunx wrangler deploy "$ENTRY_POINT" \
              --config /dev/null \
              --name "${CLEAN_WORKER_NAME}" \
              --compatibility-date 2025-03-25 \
              --compatibility-flags "nodejs_compat" \
              --assets "$ASSETS_DIR" \
              --minify
          else
            # Deploy without assets
            bunx wrangler deploy "$ENTRY_POINT" \
              --config /dev/null \
              --name "${CLEAN_WORKER_NAME}" \
              --compatibility-date 2025-03-25 \
              --compatibility-flags "nodejs_compat" \
              --minify
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Output deployment URL
        run: |
          # Clean up worker name for URL output too
          CLEAN_WORKER_NAME=$(echo "${WORKER_NAME}" | sed 's/\./-/g')
          echo "üöÄ Deployed to: https://${CLEAN_WORKER_NAME}.magnusson27.workers.dev"
